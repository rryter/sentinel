version: "3.8"

services:
  backend:
    build:
      context: ./sentinel-backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "1234:1234" # Rails debugger
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sentinel_development
      - REDIS_URL=redis://redis:6379/1
      - RUBY_DEBUG_OPEN=true
      - RUBY_DEBUG_HOST=0.0.0.0
      - RUBY_DEBUG_PORT=1234
      - ANALYZER_SERVICE_URL=http://analysis:8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./sentinel-backend:/app
      - /app/tmp/cache
      - /app/public/assets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - sentinel-network

  sidekiq:
    build:
      context: ./sentinel-backend
      dockerfile: Dockerfile
    command: bundle exec rdbg -n --host 0.0.0.0 --port 1235 -- /usr/local/bundle/bin/sidekiq -C config/sidekiq.yml
    ports:
      - "1235:1235" # Sidekiq debugger
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sentinel_development
      - REDIS_URL=redis://redis:6379/1
      - RUBY_DEBUG_OPEN=true
      - RUBY_DEBUG_HOST=0.0.0.0
      - RUBY_DEBUG_PORT=1235
      - ANALYZER_SERVICE_URL=http://analysis:8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./sentinel-backend:/app
      - /app/tmp/cache
    networks:
      - sentinel-network

  frontend:
    build:
      context: ./sentinel-frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "4200:4200"
    volumes:
      - ./sentinel-frontend:/app:delegated
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - API_URL=http://localhost:3000
      - HOST=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - sentinel-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sentinel_development
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sentinel-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sentinel-network

  analysis:
    build:
      context: ./sentinel-analysis
      target: development
    ports:
      - "8080:8080" # Uploader service
      - "2345:2345" # Uploader debugger
      - "2346:2346" # Indexer debugger
    volumes:
      - ./sentinel-analysis:/app/src
      - analysis_data:/app/uploads
      - analysis_results:/app/results
      - /home/rryter/projects/rai/apps/raiding.ai:/target
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - sentinel-network

networks:
  sentinel-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  go-modules:
  analysis_data:
  analysis_results:
