/**
 * Sentinel API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiV1AnalysisJobsAnalysisJobIdViolationsGet200Response } from '../model/api-v1-analysis-jobs-analysis-job-id-violations-get200-response';
// @ts-ignore
import { ApiV1ViolationsGet200Response } from '../model/api-v1-violations-get200-response';
// @ts-ignore
import { ApiV1ViolationsTimeSeriesGet200Response } from '../model/api-v1-violations-time-series-get200-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    ViolationsServiceInterface,
    ApiV1AnalysisJobsAnalysisJobIdViolationsGetRequestParams,
    ApiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGetRequestParams,
    ApiV1ViolationsGetRequestParams,
    ApiV1ViolationsTimeSeriesGetRequestParams
} from './violations.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ViolationsService extends BaseService implements ViolationsServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Lists violations for an analysis job
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1AnalysisJobsAnalysisJobIdViolationsGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiV1AnalysisJobsAnalysisJobIdViolationsGet200Response>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiV1AnalysisJobsAnalysisJobIdViolationsGet200Response>>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiV1AnalysisJobsAnalysisJobIdViolationsGet200Response>>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const analysisJobId = requestParameters?.analysisJobId;
        if (analysisJobId === null || analysisJobId === undefined) {
            throw new Error('Required parameter analysisJobId was null or undefined when calling apiV1AnalysisJobsAnalysisJobIdViolationsGet.');
        }
        const page = requestParameters?.page;
        const perPage = requestParameters?.perPage;
        const ruleName = requestParameters?.ruleName;
        const ruleId = requestParameters?.ruleId;
        const filePath = requestParameters?.filePath;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>perPage, 'per_page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleName, 'rule_name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleId, 'rule_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>filePath, 'file_path');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/analysis_jobs/${this.configuration.encodeParam({name: "analysisJobId", value: analysisJobId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/violations`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ApiV1AnalysisJobsAnalysisJobIdViolationsGet200Response>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets time series data for violations in an analysis job
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiV1ViolationsTimeSeriesGet200Response>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiV1ViolationsTimeSeriesGet200Response>>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiV1ViolationsTimeSeriesGet200Response>>;
    public apiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGet(requestParameters: ApiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const analysisJobId = requestParameters?.analysisJobId;
        if (analysisJobId === null || analysisJobId === undefined) {
            throw new Error('Required parameter analysisJobId was null or undefined when calling apiV1AnalysisJobsAnalysisJobIdViolationsTimeSeriesGet.');
        }
        const startDate = requestParameters?.startDate;
        const endDate = requestParameters?.endDate;
        const ruleId = requestParameters?.ruleId;
        const ruleName = requestParameters?.ruleName;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>startDate, 'start_date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>endDate, 'end_date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleId, 'rule_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleName, 'rule_name');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/analysis_jobs/${this.configuration.encodeParam({name: "analysisJobId", value: analysisJobId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/violations/time_series`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ApiV1ViolationsTimeSeriesGet200Response>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists all violations
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1ViolationsGet(requestParameters?: ApiV1ViolationsGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiV1ViolationsGet200Response>;
    public apiV1ViolationsGet(requestParameters?: ApiV1ViolationsGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiV1ViolationsGet200Response>>;
    public apiV1ViolationsGet(requestParameters?: ApiV1ViolationsGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiV1ViolationsGet200Response>>;
    public apiV1ViolationsGet(requestParameters?: ApiV1ViolationsGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const page = requestParameters?.page;
        const perPage = requestParameters?.perPage;
        const ruleName = requestParameters?.ruleName;
        const ruleId = requestParameters?.ruleId;
        const analysisJobId = requestParameters?.analysisJobId;
        const filePath = requestParameters?.filePath;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>perPage, 'per_page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleName, 'rule_name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleId, 'rule_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisJobId, 'analysis_job_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>filePath, 'file_path');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/violations`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ApiV1ViolationsGet200Response>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets time series data for violations
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiV1ViolationsTimeSeriesGet(requestParameters?: ApiV1ViolationsTimeSeriesGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ApiV1ViolationsTimeSeriesGet200Response>;
    public apiV1ViolationsTimeSeriesGet(requestParameters?: ApiV1ViolationsTimeSeriesGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiV1ViolationsTimeSeriesGet200Response>>;
    public apiV1ViolationsTimeSeriesGet(requestParameters?: ApiV1ViolationsTimeSeriesGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiV1ViolationsTimeSeriesGet200Response>>;
    public apiV1ViolationsTimeSeriesGet(requestParameters?: ApiV1ViolationsTimeSeriesGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const startDate = requestParameters?.startDate;
        const endDate = requestParameters?.endDate;
        const ruleId = requestParameters?.ruleId;
        const ruleName = requestParameters?.ruleName;
        const analysisJobId = requestParameters?.analysisJobId;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>startDate, 'start_date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>endDate, 'end_date');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleId, 'rule_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>ruleName, 'rule_name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>analysisJobId, 'analysis_job_id');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/violations/time_series`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ApiV1ViolationsTimeSeriesGet200Response>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
